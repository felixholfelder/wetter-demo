name: Wetter-Demo Pipeline

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  pull_request:
    branches:
      - '**'
    tags:
      - '**'

env:
  IMAGE_NAME: felixholfelder/wetter-demo
  VERSION: ${{ github.ref_name }}

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Set version
        run: |
          if [[ github.ref_type != 'tag' ]]; then
              echo "VERSION=${{ github.run_number }}" >> "0.0.$GITHUB_RUN_NUMBER"
          fi

  qualitygate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Checkstyle
#        run: ./mvnw checkstyle:check
#
#      - name: PMD
#        run: ./mvnw pmd:check

  dockerize:
    runs-on: ubuntu-latest
    needs: qualitygate
#    if: github.ref_type == 'tag'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Use Java 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'microsoft' # See 'Supported distributions' for available options
#          java-version: '17'
#
#      - name: Clean, Install
#        run: ./mvnw -Dmaven.test.skip=true clean install
#
#      - name: Build Jar-File
#        run: ./mvnw -Dmaven.test.skip=true -Drevision=${{ env.VERSION }} package

#      - name: Build Docker image
#        run: docker build --build-arg revision=${{ env.VERSION }} . -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Build Docker image
        run: docker build . -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Push to Dockerhub
        run: |
          docker login -u=${{ secrets.DOCKERHUB_USER }} -p=${{ secrets.DOCKERHUB_PASS }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
#
#      - name: Create config
#        run: |
#          mkdir ${HOME}/.kube
#          echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
#
#      - name: Use context
#        run: kubectl config use-context default
#
#      - name: Deploy app
#        run: kubectl set image deployments/refuel-service-deployment server=${{ env.IMAGE_NAME }}:${{ env.VERSION }} -n refuel-service

  clean-up:
    runs-on: ubuntu-latest
    if: always()
    needs: deploy
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: refuel-service-artifact
